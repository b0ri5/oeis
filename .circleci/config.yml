# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
orbs:
  renovate: daniel-shuy/renovate@3.1.0
jobs:
  test:
    # Use a machine executor because it most easily supports multiple languages
    machine:
      # See https://circleci.com/docs/2.0/configuration-reference/#available-machine-images for the list of images
      image: ubuntu-2204:2023.10.1
    steps:
      - checkout
      # Use the latest version of python available as reported via "pyenv install -l"
      - run: pyenv install -l
      - run: pyenv global 3.11.5
      # Install bazelisk. See https://github.com/bazelbuild/bazelisk#requirements
      - run: go version
      - run: go install github.com/bazelbuild/bazelisk@latest
      - run: bazelisk test --test_output=errors //...
  check-buildifier:
    docker:
      # See https://circleci.com/developer/images/image/cimg/go for a list of images
      - image: cimg/go:1.23.1@sha256:1b223fc2e7ab155c44735ac0052113613b64e60b76af001ac38ea345a7a55bc6
    steps:
      - checkout
      - run: go install github.com/bazelbuild/buildtools/buildifier@latest
      - run: bash .circleci/check_buildifier
      - run:
          command: echo "Run .circleci/fix_buildifier"
          when: on_fail
  check-python:
    docker:
      # See https://circleci.com/developer/images/image/cimg/python for a list of images
      - image: cimg/python:3.12.6@sha256:96bd2983f9279a4693190fdbe1fc3ec93b3f29845c327d117e81200c22dfbabd
    steps:
      - checkout
      - run: pip install -r requirements_lock.txt
      - run: pip install pylint
      # It would be nice to keep invalid-name but it is too convenient to use the oeis sequence and "n"
      - run: find . -name "*.py" | xargs pylint --disable=missing-docstring --disable=too-many-public-methods --disable=invalid-name
  # See https://github.com/google/yapf
  check-yapf:
    docker:
      # See https://circleci.com/developer/images/image/cimg/python for a list of images
      - image: cimg/python:3.12.6@sha256:96bd2983f9279a4693190fdbe1fc3ec93b3f29845c327d117e81200c22dfbabd
    steps:
      - checkout
      - run: pip install yapf
      - run: find . -name "*.py" | xargs yapf --parallel --style google --diff
      - run:
          command: |
            echo "Run find . -name "*.py" | xargs yapf --parallel --style google --in-place"
          when: on_fail

workflows:
  test-workflow:
    jobs:
      - check-buildifier
      - check-python
      - check-yapf
      - renovate/validate-config
      - test
