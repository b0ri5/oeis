# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
orbs:
  renovate: daniel-shuy/renovate@3.0.0
jobs:
  test:
    # Use a machine executor because it most easily supports multiple languages
    machine:
      # See https://circleci.com/docs/2.0/configuration-reference/#available-machine-images for the list of images
      image: ubuntu-2004:202107-02
    steps:
      - checkout
      # Install bazelisk. See https://github.com/bazelbuild/bazelisk#requirements
      - run: go get github.com/bazelbuild/bazelisk
      - run: bazelisk test --test_output=errors //...
  check-buildifier:
    docker:
      # See https://circleci.com/developer/images/image/cimg/node for a list of images
      - image: cimg/node:16.8.0@sha256:4caa18dfb1130e60f25eaf980cb90f92e50f3c40f20ecd95394d5de0567d6c62
    steps:
      - checkout
      - run: yarn install --frozen-lockfile --non-interactive
      - run: bash .circleci/check_buildifier
      - run:
          command: echo "Run .circleci/fix_buildifier"
          when: on_fail
  check-python:
    docker:
      # See https://circleci.com/developer/images/image/cimg/python for a list of images
      - image: cimg/python:3.9.7@sha256:9833615c8c454c09f71a629e83507ebdc98d8bc4c69a7c0a567dc89aeac8b3bf
    steps:
      - checkout
      - run: pip install pylint
      - run: find . -name "*.py" | xargs pylint --disable=missing-docstring --disable=too-many-public-methods
  # See https://github.com/google/yapf
  check-yapf:
    docker:
      # See https://circleci.com/developer/images/image/cimg/python for a list of images
      - image: cimg/python:3.9.7@sha256:9833615c8c454c09f71a629e83507ebdc98d8bc4c69a7c0a567dc89aeac8b3bf
    steps:
      - checkout
      - run: pip install yapf
      - run: find . -name "*.py" | xargs yapf --parallel --style google --diff
      - run:
          command: |
            echo "Run find . -name "*.py" | xargs yapf --parallel --style google --in-place"
          when: on_fail

workflows:
  test-workflow:
    jobs:
      - check-buildifier
      - check-python
      - check-yapf
      - renovate/validate-config
      - test
